<% content_for :title, "Locations" %>

<% if notice.present? %>
  <p class="py-2 px-3 bg-green-50 mb-5 text-green-500 font-medium rounded-md inline-block" id="notice"><%= notice %></p>
<% end %>

<div class="flex h-full">
  <div id="map" class="sm:block hidden flex-1 min-w-1/2"></div>

  <div id="locations" class="sm:flex-initial flex-1 sm:basis-[450px] flex flex-col justify-start items-stretch gap-4 overflow-y-auto border-l border-b border-gray-200 p-4">
    <form class="w-full flex gap-2">
      <div class="flex-1 relative">
        <div class="absolute inset-y-0 start-0 flex items-center ps-3 pointer-events-none">
          <svg class="w-4 h-4 text-gray-500 dark:text-gray-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20">
            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m19 19-4-4m0-7A7 7 0 1 1 1 8a7 7 0 0 1 14 0Z"/>
          </svg>
        </div>
        <input type="search" class="w-full ps-10 rounded-lg border border-gray-200 focus:ring-blue-500 focus:border-blue-500 truncate" placeholder="Search by name, address, or city"/>
      </div>
      <button type="submit" class="text-white text-md bg-blue-600 hover:bg-blue-700 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg px-4 py-2">Search</button>
    </form>

    <div class="h-[1px] bg-gray-200"></div>

    <div class="w-full flex flex-col justify-start items-stretch gap-4 overflow-y-auto">
      <% if @locations.any? %>
        <% @locations.each do |location| %>
          <%= render location %>
        <% end %>
      <% else %>
        <p class="text-center my-10">No locations found.</p>
      <% end %>
    </div>
  </div>
</div>

<script>
  let map = null;

  const initializeMap = () => {
    const mapElement = document.getElementById('map');

    if (!mapElement) {
      return;
    }

    if (map) {
      map = null;
    }

    if (mapElement._leaflet_id) {
      delete mapElement._leaflet_id;
    }

    map = L.map(mapElement)

    L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
    }).addTo(map);

    const locations = <%= raw @locations.to_json(only: [:id, :name, :latitude, :longitude]) %>;

    locations.forEach((location) => {
      if (location.latitude && location.longitude) {
        L.marker([parseFloat(location.latitude), location.longitude])
          .addTo(map)
          .bindPopup(`<strong>${location.name}</string>`)
      }
    })

    if (locations.length > 0) {
      const bounds = L.latLngBounds(
        locations
          .filter((location) => { return location.latitude && location.longitude })
          .map((location) => { return [location.latitude, location.longitude] })
      );

      map.fitBounds(bounds, { padding: [100, 100] })
    }

    const resizeObserver = new ResizeObserver(() => {
      map.invalidateSize();
    });

    resizeObserver.observe(mapElement);
  }

  document.addEventListener("turbo:load", initializeMap);
  document.addEventListener("turbo:before-cache", () => {
    if (map) {
      map = null;
    }
  });
</script>
